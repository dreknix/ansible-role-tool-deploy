---

- name: Test example tasks
  hosts: '{{ target | default("all") }}'
  vars:
    test_cases:
      - url: https://example.org/tool.tgz
      - github_repo: go-task/task
        release_file: v3.40.1/task_linux_amd64.tar.gz
      - xxx: Error
  tasks:
    - name: Test url detection
      vars:
        tool_deploy_file_url: >-
          {%- if tool.url is defined -%}
            {{ tool.url }}
          {%- else -%}
            {%- if tool.github_repo is defined -%}
              https://github.com/{{ tool.github_repo }}/
              {%- if tool.release_file is defined -%}
                releases/download/{{ tool.release_file }}
              {%- else -%}
                {# NOT A VALID CONFIG #}{{ None[0] }}
              {%- endif -%}
            {%- else -%}
              {# NOT A VALID CONFIG #}{{ None[0] }}
            {%- endif -%}
          {%- endif -%}
      ansible.builtin.debug:
        var: tool_deploy_file_url
      loop: "{{ test_cases }}"
      loop_control:
        loop_var: tool

- name: Test role deploying tools
  hosts: '{{ target | default("all") }}'
  vars:
    delta_version: 0.18.2
    direnv_version: 2.35.0
    jq_version: 1.7.1
    task_version: 3.40.1
    tool_deploy_list:
      delta:
        # force_install: true
        action: download_archive
        github_repo: dandavison/delta
        release_file: >-
          {{ delta_version }}/delta-{{ delta_version }}-x86_64-unknown-linux-gnu.tar.gz
        version:
          args: --version
          match: "delta {{ delta_version }}"
        bash_completion:
          generate_args: --generate-completion bash
        zsh_completion:
          generate_args: --generate-completion zsh
      direnv:
        action: download_binary
        github_repo: direnv/direnv
        release_file: >-
          v{{ direnv_version }}/direnv.linux-amd64
        version:
          args: version
          match: "{{ direnv_version }}"
      jq:
        action: download_binary
        github_repo: jqlang/jq
        release_file: >-
          jq-{{ jq_version }}/jq-linux-amd64
        version:
          args: --version
          match: "jq-{{ jq_version }}"
      task:
        # force_install: true
        action: download_archive
        github_repo: go-task/task
        release_file: >-
          v{{ task_version }}/task_linux_amd64.tar.gz
        version:
          args: --version
          match: "Task version: v{{ task_version }}"
        bash_completion:
          src: "completion/bash/task.bash"
        zsh_completion:
          src: "completion/zsh/_task"

  roles:
    - role: tool_deploy

...
